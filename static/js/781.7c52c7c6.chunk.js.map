{"version":3,"file":"static/js/781.7c52c7c6.chunk.js","mappings":"+YAEMA,EAAQ,SAAHC,GAAmB,OAARA,EAALC,MAAaD,EAANE,MAA2B,EAE7CC,EAAQ,SAACC,GAAwB,IAAjBC,EAAQC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACvBG,EAAMC,KAAAC,IAAG,GAAMN,GACrB,OAAOK,KAAKP,OAAOC,EAAQQ,OAAOC,SAAWJ,GAAUA,CAC3D,EAGMK,EAAU,SAACC,GACb,IAAMC,EAAO,GACPC,EAAUF,EACZG,EAAI,EACFC,EAAU,SAACC,EAAGC,GAAC,OAAKJ,EAAQD,EAAKI,GAAIJ,EAAKK,IAAM,CAAC,EACjDC,EAAO,SAACF,EAAGC,GACb,IAAME,EAAOP,EAAKI,GAClBJ,EAAKI,GAAKJ,EAAKK,GACfL,EAAKK,GAAKE,CACd,EAuBA,MAAO,CACHC,KAAM,SAACC,GAEHT,EADAE,GAAK,GACKO,EAzBL,SAACL,GAGV,IAFA,IAAIM,EAAIN,EACJO,EAAKjB,KAAKkB,MAAMF,EAAI,GACjBA,EAAI,GAAKP,EAAQQ,EAAID,IACxBJ,EAAKK,EAAID,GACTA,EAAIC,EACJA,EAAKjB,KAAKkB,MAAMF,EAAI,EAE5B,CAkBQG,CAAKX,EACT,EACAY,IAAK,WACD,GAAU,IAANZ,EAAJ,CAEAI,EAAK,EAAGJ,GACRA,GAAK,EACL,IAAMa,EAAMf,EAAKc,MAEjB,OA1BK,SAACV,GAGV,IAFA,IAAIM,EAAIN,EACJO,EAAS,EAAJD,EACFC,GAAMT,IACLS,EAAKT,GAAKC,EAAQQ,EAAIA,EAAK,KAC3BA,GAAM,GACLR,EAAQO,EAAGC,KAEhBL,EAAKI,EAAGC,GAERA,EAAS,GADTD,EAAIC,EAGZ,CAaQK,CAAK,GACED,CALa,CAMxB,EACAE,KAAM,kBAAMf,CAAC,EAErB,EAqCMgB,EAAmB,SAACC,EAAOC,EAAWC,GACxC,IAAMC,EApCiB,SAACH,EAAOC,EAAWC,GAC1C,IAAMC,EAAgB,IAAIC,IACpBC,EAAU,IAAIC,IACdC,EAAsB,IAAIH,IAChCG,EAAoBC,IAAIP,EAAW,GACnC,IAzD+BQ,EAyDzBC,EAAS/B,GAzDgB8B,EAyDkB,SAACE,GAAE,OAAKA,EAAGC,MAAM,EAzD1B,SAACC,EAAGC,GAAC,OAAKL,EAAKK,GAAKL,EAAKI,EAAE,IA0DnEH,EAAOrB,KAAK,CAAE0B,GAAId,EAAWW,OAAQ,IACrC,IAD0C,IAAAI,EAAA,WAEtC,IAAAC,EAAuBP,EAAOf,MAAtBoB,EAAEE,EAAFF,GAAIH,EAAMK,EAANL,OACZ,IAAKP,EAAQa,IAAIH,GAAK,CAClB,IAAMI,EAAmBnB,EAAMe,GAC/BV,EAAQe,IAAIL,GACZI,EAAiBE,SAAQ,SAACC,EAAgBC,GACtC,IAAMC,EAAYZ,EAASU,EACrBG,EAAYtB,EAAcuB,IAAIH,GAC9BI,EAAgBpB,EAAoBmB,IAAIH,SACxBlD,IAAlBsD,GACCA,EAAgBH,IACZG,EAAgBH,EAAY,YAAwBnD,IAAdoD,GAA2BA,EAAYV,MAClFR,EAAoBC,IAAIe,EAAUC,GAClCd,EAAOrB,KAAK,CAAE0B,GAAIQ,EAAUX,OAAQY,IACpCrB,EAAcK,IAAIe,EAAUR,GAEpC,GACJ,CACJ,EAlBOL,EAAOZ,OAAS,GAACkB,IAmBxB,OAAOT,EAAoBW,IAAIhB,GAAWC,OAAgB9B,CAC9D,CAS0BuD,CAAmB5B,EAAOC,EAAWC,GAC3D,OAAOC,EATsB,SAACA,EAAeD,GAE7C,IADA,IAAM2B,EAAQ,GACLC,EAAO5B,OAAkB7B,IAATyD,EAAoBA,EAAO3B,EAAcuB,IAAII,GAClED,EAAMxC,KAAKyC,GAEf,OAAOD,EAAME,SACjB,CAG2BC,CAAyB7B,EAAeD,QAAW7B,CAC9E,EAMM4D,EAAkB,SAACC,EAAKC,EAAgBC,EAASC,GAGnD,OAFiBF,GAAkBD,EAAI9D,OAAS,GAAKgE,EAAU,EAAIC,EAAUH,EAAI9D,QACxD8D,EAAII,QAAO,SAACC,EAAKC,GAAK,OAAKD,EAAM3E,EAAM4E,EAAM,GAAE,EAE5E,EACMC,EAAO,SAACC,EAAQzD,EAAGC,EAAGpB,EAAO6E,EAAiBP,EAASC,GACzD,IAAMH,EAAMQ,EAAOE,MAAM3D,EAAGC,GACtB2D,EAAeZ,EAAgBC,EAAKpE,EAAOsE,EAASC,GAC1D,OAAOQ,EAAe,EAAItE,KAAAC,IAACqE,EAAeF,EAAoB,GAAIT,EAAI9D,YAASC,CACnF,EAkBMyE,EAAoB,SAAHC,GAAmC,IAA7BL,EAAMK,EAANL,OAAQM,EAAaD,EAAbC,cACzBZ,EAAsEY,EAAtEZ,QAASC,EAA6DW,EAA7DX,QAASF,EAAoDa,EAApDb,eAAgBQ,EAAoCK,EAApCL,gBAAiBM,EAAmBD,EAAnBC,eACrDC,EAjCkB,SAAHC,GAAqD,IAA/CT,EAAMS,EAANT,OAAQC,EAAeQ,EAAfR,gBAAiBR,EAAcgB,EAAdhB,eAC9CiB,EAAWV,EAAOJ,QAAO,SAACC,EAAKC,GAAK,OAAKjE,KAAK8E,IAAIzF,EAAM4E,GAAQD,EAAI,GAAE9D,OAAO6E,WACnF,OAAOtF,EAAMmE,EAAiBQ,EAAkBS,GAAY,CAChE,CA8B4BG,CAAoB,CAAEb,OAAAA,EAAQP,eAAAA,EAAgBQ,gBAAAA,IAChEa,EApBkB,SAAHC,GAAA,IAAMf,EAAMe,EAANf,OAAQM,EAAaS,EAAbT,cAAeL,EAAec,EAAfd,gBAAiBO,EAAeO,EAAfP,gBAAiBD,EAAcQ,EAAdR,eAAc,OAAQ,SAACnB,GAC3G,IAAI4B,EAAIC,EACAxB,EAAqCa,EAArCb,eAAgBC,EAAqBY,EAArBZ,QAASC,EAAYW,EAAZX,QAC3BuB,EAAU,IAAIxD,IACpBwD,EAAQpD,IAAIsB,EAAM,GAGlB,IAFA,IAAM+B,EAAkH,QAAnGH,EAAwB,OAAnBT,QAA8C,IAAnBA,OAA4B,EAASA,EAAea,iBAA8B,IAAPJ,EAAgBA,EAAK,EAC/IK,EAAYxF,KAAK8E,IAAIH,EAAqH,QAAnGS,EAAwB,OAAnBV,QAA8C,IAAnBA,OAA4B,EAASA,EAAee,iBAA8B,IAAPL,EAAgBA,EAAKM,KACpKhF,EAAI6C,EAAO+B,EAAa5E,EAAIyD,EAAOtE,OAAS,KAC7Ca,EAAI6C,EAAOiC,GADqC9E,GAAK,EAAG,CAG5D,IAAMiF,EAAczB,EAAKC,EAAQZ,EAAM7C,EAAGkD,EAAgBQ,EAAiBP,EAASC,GACpF,QAAoBhE,IAAhB6F,EACA,MACJN,EAAQpD,IAAIvB,EAAGiF,EACnB,CACA,OAAON,CACX,CAAC,CAIwBO,CAAoB,CACrCzB,OAAAA,EACAM,cAAAA,EACAL,gBAAAA,EACAO,gBAAAA,EACAD,eAAAA,IAEEmB,EAAOrE,EAAiByD,EAAc,EAAGd,EAAOtE,QACtD,QAAaC,IAAT+F,EAAJ,CAGA,IADA,IAAMC,EAAS,GAAGC,EAAA,WAEd,IAAMpC,EAAMQ,EAAO6B,KAAI,SAAC/B,EAAOgC,GAAK,MAAM,CAAEhC,MAAAA,EAAOgC,MAAAA,EAAO,IAAG5B,MAAMwB,EAAKnF,EAAI,GAAImF,EAAKnF,IAC/ElB,EAASkE,EAAgBC,EAAIqC,KAAI,SAAAE,GAAQ,OAAAA,EAALjC,KAAiB,IAAGL,EAAgBC,EAASC,GACvFgC,EAAOhF,KAAK6C,EAAIqC,KAAI,SAAAG,EAAmBC,GAAU,IAA1BnC,EAAKkC,EAALlC,MAAOgC,EAAKE,EAALF,MAAK,MAAoB,CACnDhC,MAAAA,EACA6B,OAAQ,CACJtG,OAAAA,EACAD,MAAOC,EAASH,EAAM4E,GACtBgC,MAAAA,EACAG,WAAAA,EACAC,YAAa1C,EAAI9D,QAExB,IACL,EAbSa,EAAI,EAAGA,EAAImF,EAAKhG,OAAQa,GAAK,EAACqF,IAcvC,OAAOD,CAhBa,CAiBxB,EAEMQ,EAAY,SAACC,EAAIC,EAAAC,GAAmE,IAA/DlH,EAAKiH,EAALjH,MAAO8G,EAAWG,EAAXH,YAAiBxC,EAAO4C,EAAP5C,QAASC,EAAO2C,EAAP3C,QAASF,EAAc6C,EAAd7C,eAC3D8C,EAAO7C,GAAWwC,EAAc,GAAK,EAAIvC,EAAUuC,EACzD,MAAO,SAAPM,OAAgBJ,EAAI,OAAAI,OAAMD,EAAI,UAAAC,OAASlH,GAAOmE,EAAiB8C,GAAQnH,EAAO,GAAE,IACpF,EACMqH,EAAgB,SAACd,EAAQrB,GAAa,MAA8B,SAAzBA,EAAcqB,OAAiB,eAAAa,OAC3D,EAAIlC,EAAcX,QAAO,OACxCwC,EAAU,OAAQR,EAAQrB,EAAc,EACxCoC,EAAsB,SAACtF,EAAMuE,EAAQrB,GAAoB,IAAIU,EAAIC,EAAI,OAAOkB,EAAkG,QAAvFlB,EAA2C,QAArCD,EAAK5D,EAAKuF,MAAM,uBAAoC,IAAP3B,OAAgB,EAASA,EAAG,UAAuB,IAAPC,EAAgBA,EAAK7D,EAAMuE,EAAQrB,EAAgB,EAwBzOsC,EAAgB,SAACC,GACnB,IAAI7B,EAAIC,EAsCc6B,EArCdhD,EAA6F+C,EAA7F/C,MAAO6B,EAAsFkB,EAAtFlB,OAAQrB,EAA8EuC,EAA9EvC,cAAayC,EAAiEF,EAA/DG,WAAUC,OAAA,IAAAF,EAAiC,CAAC,EAACA,EAA/BG,EAAKD,EAALC,MAAUC,GAAcC,EAAAA,EAAAA,GAAAH,EAAAI,GAASC,EAAgBT,EAAhBS,YAC7EC,EAAYjD,EAAZiD,QACFC,GAAUC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACZC,QAAS,QACTC,UAAW,cACXvI,MAAOqH,EAAcd,EAAQrB,GAC7BjF,OAAQ,OACRuI,YAAa,GAAFpB,OAAK1C,EAAM1E,MAAK,OAAAoH,OAAM1C,EAAMzE,SACnCiF,EAAcX,QAAU,CAAEA,QAAS,GAAF6C,OAAKlC,EAAcX,QAAO,OAAS,OAC1C,YAAzBW,EAAcqB,QAAiD,YAAzBrB,EAAcqB,SACrDA,EAAOM,WAAaN,EAAOO,YAAc,EACvC,CAAE2B,aAAc,GAAFrB,OAAKlC,EAAcZ,QAAO,OACxC,MACF6D,EAAU,CAAEO,OAAQ,WAAc,MACnCZ,GAEDa,EAAcR,EACd,SAACS,GACCT,EAAQ,CAAES,MAAAA,EAAOlE,MAAAA,EAAOgC,MAAOH,EAAOG,OAC1C,OACEnG,EACAqH,GAAUS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACZQ,IAAKnE,EAAMmE,IACXC,IAA0B,QAApBlD,EAAKlB,EAAMoE,WAAwB,IAAPlD,EAAgBA,EAAK,GACvDmD,MAAOrE,EAAMqE,MACbZ,QAASQ,EACTb,MAAOM,EACPY,UAAW,2BACXC,QAAS,OACTC,SAAU,SAtDK,SAACxE,EAAO6B,EAAQrB,GACnC,IAAIiE,EACAC,EAmBJ,OAlBI1E,EAAM2E,QAAU3E,EAAM2E,OAAO/I,OAAS,IACtC6I,EAASzE,EAAM2E,OACVjC,OAAQ1C,EAAM2E,OAAOC,MAAK,SAAAC,GAAQ,OAAAA,EAALvJ,QAAsB0E,EAAM1E,KAAK,IAE7D,GADA,CAAC,CAAE6I,IAAKnE,EAAMmE,IAAK7I,MAAO0E,EAAM1E,MAAOC,OAAQyE,EAAMzE,UAEtDuJ,MAAK,SAACC,EAAOC,GAAM,OAAKD,EAAMzJ,MAAQ0J,EAAO1J,KAAK,IAClDyG,KAAI,SAACkD,GAAK,SAAAvC,OAAQuC,EAAMd,IAAG,KAAAzB,OAAIuC,EAAM3J,MAAK,QAC1C4J,KAAK,MAENR,EADAlE,EAAckE,OACLlE,EAAckE,MAAMA,OAAS,IACjC3C,KAAI,SAAAoD,GAAA,IAAGC,EAAQD,EAARC,SAAU9H,EAAI6H,EAAJ7H,KAAI,SAAAoF,OAAU0C,EAAQ,KAAA1C,OAAIE,EAAoBtF,EAAMuE,EAAQrB,GAAc,IAC3FkC,OAAOE,EAAoBpC,EAAckE,MAAMpH,KAAMuE,EAAQrB,IAC7D0E,KAAK,MAGF,GAAHxC,OAAM3G,KAAKsJ,KAAMxD,EAAOvG,MAAQkF,EAAcb,eAAkB,KAAI,OAG1E,CAAE8E,OAAAA,EAAQC,MAAAA,EACrB,CAiCWY,CAAetF,EAAO6B,EAAQrB,IAC9B6C,GAEDkC,EAAqB,WAAsB,IAAnBC,GAAmB7J,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAC,GAAb6J,QAClBrB,EAA4DjB,EAA5DiB,IAAKC,EAAuDlB,EAAvDkB,IAAKK,EAAkDvB,EAAlDuB,OAAQC,EAA0CxB,EAA1CwB,MAAce,EAA4BvC,EAAnCE,MAA0BsC,GAAIpC,EAAAA,EAAAA,GAAKJ,EAAUyC,GAC9E,OAAQC,EAAAA,cAAoB,OAAKjC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAIS,IAAKA,GAASK,EAAS,CAAEA,OAAAA,EAAQC,MAAAA,GAAU,MAAO,CAAH,GAAGP,IAAKA,EAAKf,MAAOoC,EAAU,CAAE5B,QAAS,QAAStI,MAAO,OAAQC,OAAQ,QAAWkK,GAAmBC,GAC/L,EACMG,EAAgG,CAClGjC,SADkBZ,EAQlBU,GARqBE,QAErBC,UAFuCb,EAATa,UAG9BvI,MAH8C0H,EAAL1H,MAIzCwI,YAJ2Dd,EAAXc,YAKhDjE,QALoEmD,EAAPnD,QAM7DkE,aANkFf,EAAZe,aAOtEC,OAP0FhB,EAANgB,QASxF,OAAQ4B,EAAAA,cAAoBA,EAAAA,SAAgB,KAOpC,QAP2CzE,EAAqB,OAAhBqC,QAAwC,IAAhBA,OAAyB,EAASA,EAAY,CAC1HxD,MAAAA,EACA6B,OAAAA,EACArB,cAAAA,EACA0C,WAAAA,EACAqC,mBAAAA,EACAM,aAAAA,WACmB,IAAP1E,EAAgBA,EAAKoE,IACzC,EAEMO,EAA4B,SAAHC,GAAA,IAAMC,EAAiBD,EAAjBC,kBAAmBC,EAAQF,EAARE,SAAQ,OAAQL,EAAAA,cAAoB,OAAKjC,EAAAA,EAAAA,GAAA,GAAOqC,GAAqBC,EAAS,EAChIC,EAAuB,SAACnD,GAC1B,IAAQvC,EAAmIuC,EAAnIvC,cAAe2F,EAAoHpD,EAApHoD,SAAUC,EAA0GrD,EAA1GqD,UAAWC,EAA+FtD,EAA/FsD,mBAAkBC,EAA6EvD,EAA3EiD,kBAAiBO,OAAA,IAAAD,EAAwC,CAAC,EAACA,EAAtClD,EAAKmD,EAALnD,MAAUoD,GAAqBlD,EAAAA,EAAAA,GAAAiD,EAAAE,GAASR,EAAclD,EAAdkD,SACvHD,GAAiBrC,EAAAA,EAAAA,GAAA,CACnBW,UAAW,yBACXlB,OAAKO,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACDC,QAAS,OACT8C,cAAe,MACfC,SAAU,SACVC,WAAY,aACZC,eAAgB,iBACZV,EAAWC,EAAY,EAAI,CAAErC,aAAc,GAAFrB,OAAKlC,EAAcZ,QAAO,OAAS,MAC7EwD,IAEJoD,GAEP,OAAQZ,EAAAA,cAAoBA,EAAAA,SAAgB,MAA8B,OAAvBS,QAAsD,IAAvBA,EAAgCA,EAAqBP,GAA2B,CAC9JtF,cAAAA,EACA2F,SAAAA,EACAC,UAAAA,EACAJ,kBAAAA,EACAC,SAAAA,IAER,EAEMa,EAAa,SAAC/D,GAChB,IAAQ7C,EAA4E6C,EAA5E7C,OAAQM,EAAoEuC,EAApEvC,cAAegD,EAAqDT,EAArDS,YAAa6C,EAAwCtD,EAAxCsD,mBAAoBU,EAAoBhE,EAApBgE,gBAC1DC,EAAa1G,EAAkB,CAAEJ,OAAAA,EAAQM,cAAAA,IAC/C,OAAKwG,EAEGpB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMoB,EAAWjF,KAAI,SAACrC,EAAKyG,GAAQ,OAAMP,EAAAA,cAAoBM,EAAsB,CAAEe,IAAK,OAAFvE,OAASyD,GAAY3F,cAAeA,EAAe2F,SAAUA,EAAUC,UAAWY,EAAWpL,OAAQyK,mBAAoBA,EAAoBL,kBAAuC,OAApBe,QAAgD,IAApBA,OAA6B,EAASA,EAAgBf,mBAAqBtG,EAAIqC,KAAI,SAAAmF,GAAA,IAAGlH,EAAKkH,EAALlH,MAAO6B,EAAMqF,EAANrF,OAAM,OAAQ+D,EAAAA,cAAoB9C,EAAe,CAAEmE,IAAKjH,EAAMiH,KAAOjH,EAAMmE,IAAKnE,MAAOA,EAAO6B,OAAQA,EAAQrB,cAAeA,EAAegD,YAAaA,EAAaN,WAAgC,OAApB6D,QAAgD,IAApBA,OAA6B,EAASA,EAAgB7D,YAAa,IAAG,KADtqB,IAEf,EAuCMiE,EAA0B,SAAC3J,EAAO4J,EAAY3J,EAAWC,GAAO,OARtC,SAAC2J,EAAQD,EAAY1J,GAEjD,IADA,IAAMkE,EAAO,CAAClE,GACL4B,EAAO5B,EAAS9B,EAASwL,EAAYxL,EAAS,EAAGA,GAAU,EAChE0D,EAAO+H,EAAOnI,IAAII,GAAM1D,GAAQ0D,KAChCsC,EAAK/E,KAAKyC,GAEd,OAAOsC,EAAKrC,SAChB,CAC2E+H,CArC/C,SAAC9J,EAAO4J,EAAY3J,EAAWC,GACvD,IAAM2J,EAAS,IAAIzJ,IACb2J,EAAQ,IAAIzJ,IAClByJ,EAAM3I,IAAInB,GACV,IADqB,IAAA+J,EAAA,SAAA5L,GAEjB,IAAM6L,GAAYC,EAAAA,EAAAA,GAAOH,EAAMI,QAC/BJ,EAAMK,QACNH,EAAa5I,SAAQ,SAACS,GAClB,IAAMuI,EAAoBjM,EAAS,EAAIyL,EAAOnI,IAAII,GAAM1D,GAAQwC,OAAS,EACzEZ,EAAM8B,GAAMT,SAAQ,SAAAiJ,GAA0B,IAAvB/I,EAAQ+I,EAAR/I,SAAUX,EAAM0J,EAAN1J,OACzB2J,EAAQV,EAAOnI,IAAIH,GAClBgJ,IACDA,EAAQ,GACRV,EAAOrJ,IAAIe,EAAUgJ,IAEzB,IAAM/I,EAAY6I,EAAoBzJ,EAChC4J,EAAWD,EAAMnM,EAAS,KAC3BoM,GACAA,EAAS5J,OAASY,IAAcgJ,EAAS5J,OAASY,EAAY,QAAUM,EAAO0I,EAAS1I,SACzFyI,EAAMnM,EAAS,GAAK,CAAE0D,KAAAA,EAAMlB,OAAQY,IAEpCpD,EAASwL,EAAa,GAAKrI,IAAarB,GACxC6J,EAAM3I,IAAIG,EAElB,GACJ,GACJ,EAtBSnD,EAAS,EAAGA,EAASwL,EAAYxL,GAAU,EAAC4L,EAAA5L,GAuBrD,OAAOyL,CACX,CASmGY,CAAoBzK,EAAO4J,EAAY3J,EAAWC,GAAU0J,EAAY1J,EAAQ,EAe7KwK,EAAoB,SAAHC,GAGnB,IAH2G,IAAlFvG,EAAIuG,EAAJvG,KAAM1B,EAAMiI,EAANjI,OAAQP,EAAcwI,EAAdxI,eAAgByI,EAAWD,EAAXC,YAAaC,EAAaF,EAAbE,cAAezI,EAAOuI,EAAPvI,QAASC,EAAOsI,EAAPtI,QACtFyI,EAAe,GACfC,EAAaF,EAAcvI,QAAO,SAAC0I,EAAOC,GAAW,OAAKD,EAAQC,CAAW,GAAE,GAAGC,EAAA,SAAAjM,GAEpF,IAAMkM,EAASzI,EAAO6B,KAAI,SAAC/B,EAAOgC,GAAK,MAAM,CAAEhC,MAAAA,EAAOgC,MAAAA,EAAO,IAAG5B,MAAMwB,EAAKnF,GAAImF,EAAKnF,EAAI,IAClFmM,EAAoBP,EAAcvI,QAAO,SAAC0I,EAAOC,EAAazG,GAAK,OAAKwG,GAASJ,EAAY3L,GAAK2L,EAAYpG,IAAUyG,CAAW,GAAE,GACrII,GAAgBlJ,GAAkBiC,EAAKhG,OAAS,GAAKgE,EAAU,GAAKgC,EAAKhG,OAAS,GAAKiE,EAAU+I,GACnGP,EAAc5L,GACd8L,EACJD,EAAazL,KAAK8L,EAAO5G,KAAI,SAAA+G,EAAmB3G,GAAU,IAA1BnC,EAAK8I,EAAL9I,MAAOgC,EAAK8G,EAAL9G,MAAK,MAAoB,CAC5DhC,MAAAA,EACA6B,OAAQ,CACJvG,MAAOuN,EACPtN,OAAQsN,EAAczN,EAAM4E,GAC5BgC,MAAAA,EACAG,WAAAA,EACAC,YAAauG,EAAO/M,QAE3B,IACL,EAhBSa,EAAI,EAAGA,EAAImF,EAAKhG,OAAS,EAAGa,GAAK,EAACiM,EAAAjM,GAiB3C,OAAO6L,CACX,EACMS,EAAsB,SAAHC,GAAsD,IAAhD9I,EAAM8I,EAAN9I,OAAQM,EAAawI,EAAbxI,cAAeyI,EAAiBD,EAAjBC,kBAC1CC,EAA8C1I,EAA9C0I,QAAStJ,EAAqCY,EAArCZ,QAASC,EAA4BW,EAA5BX,QAASF,EAAmBa,EAAnBb,eAC7ByI,EAAc,GACdC,EAAgB,GACtB,GAAInI,EAAOtE,QAAUsN,EAAS,CAE1B,IADA,IAAMC,EAAejJ,EAAOtE,OAAS,EAAIsE,EAAOJ,QAAO,SAACC,EAAKC,GAAK,OAAKD,EAAM3E,EAAM4E,EAAM,GAAE,GAAKE,EAAOtE,OAAS,EACvGa,EAAI,EAAGA,EAAIyM,EAASzM,GAAK,EAC9B2L,EAAY3L,GAAK,EAAIoD,EACrBwI,EAAc5L,GAAKA,EAAIyD,EAAOtE,OAASR,EAAM8E,EAAOzD,IAAM0M,EAW9D,MAAO,CAAEf,YAAAA,EAAaC,cAAAA,EAAeC,aAThBJ,EAAkB,CACnCtG,KAAMwH,MAAMC,KAAK,CAAEzN,OAAQsN,EAAU,IAAKnH,KAAI,SAACuH,EAAGtH,GAAK,OAAKjG,KAAK8E,IAAImB,EAAO9B,EAAOtE,OAAO,IAC1FsE,OAAAA,EACAmI,cAAAA,EACAD,YAAAA,EACAzI,eAAAA,EACAC,QAAAA,EACAC,QAAAA,IAGR,CAaA,IAZA,IAAM0J,GAAsBrJ,EAAOJ,QAAO,SAACC,EAAKC,GAAK,OAAKD,EAAMkJ,EAAoB7N,EAAM4E,EAAM,GAAE,GAC9FJ,GAAWM,EAAOtE,OAASsN,GAC3B,EAAIrJ,EAAUK,EAAOtE,QACrBsN,EACElI,EA5DqB,SAAHwI,GAAA,IAAMtJ,EAAMsJ,EAANtJ,OAAQN,EAAO4J,EAAP5J,QAASC,EAAO2J,EAAP3J,QAASoJ,EAAiBO,EAAjBP,kBAAmBM,EAAkBC,EAAlBD,mBAAkB,OAAQ,SAACjK,GAItG,IAHA,IAAM8B,EAAU,GACVqI,EAAoC,IAArBF,EACjBhO,EAAS0N,EAAoB7N,EAAM8E,EAAOZ,IAAS,EAAIO,EAClDpD,EAAI6C,EAAO,EAAG7C,EAAIyD,EAAOtE,OAAS,IACvCwF,EAAQvE,KAAK,CAAEkC,SAAUtC,EAAG2B,OAAMrC,KAAAC,IAAGuN,EAAqBhO,EAAW,OACjEA,EAASkO,GAAgBhN,IAAMyD,EAAOtE,SAFAa,GAAK,EAK/ClB,GAAU0N,EAAoB7N,EAAM8E,EAAOzD,IAAMmD,EAAU,EAAIC,EAEnE,OAAOuB,CACX,CAAC,CAgDwBsI,CAAuB,CACxCxJ,OAAAA,EACA+I,kBAAAA,EACAM,mBAAAA,EACA3J,QAAAA,EACAC,QAAAA,IAEE+B,EAAOuF,EAAwBnG,EAAckI,EAAS,EAAGhJ,EAAOtE,QAC7Da,EAAI,EAAGA,EAAImF,EAAKhG,OAAS,EAAGa,GAAK,EAAG,CACzC,IAAMkM,EAASzI,EAAOE,MAAMwB,EAAKnF,GAAImF,EAAKnF,EAAI,IAC9C2L,EAAY3L,GAAKmD,GAAW+I,EAAO/M,OAAS,GAAK,EAAIiE,EAAU8I,EAAO/M,OACtEyM,EAAc5L,GAAK,EAAIkM,EAAO7I,QAAO,SAACC,EAAKC,GAAK,OAAKD,EAAM,EAAI3E,EAAM4E,EAAM,GAAE,EACjF,CAUA,MAAO,CAAEoI,YAAAA,EAAaC,cAAAA,EAAeC,aAThBJ,EAAkB,CACnCtG,KAAAA,EACA1B,OAAAA,EACAmI,cAAAA,EACAD,YAAAA,EACAzI,eAAAA,EACAC,QAAAA,EACAC,QAAAA,IAGR,EACM8J,EAAgB,SAAhBA,EAAiB5G,GACnB,IAAQ7C,EAA0B6C,EAA1B7C,OAAQM,EAAkBuC,EAAlBvC,cACR0I,EAA8C1I,EAA9C0I,QAAStJ,EAAqCY,EAArCZ,QAASC,EAA4BW,EAA5BX,QAASF,EAAmBa,EAAnBb,eAEnCiK,EAAqDb,EAAoB,CACrE7I,OAAAA,EACAM,cAAAA,EACAyI,mBAJuBtJ,EAAiBC,GAAWsJ,EAAU,GAAK,EAAIrJ,EAAUqJ,GAAWA,IACvFd,EAAWwB,EAAXxB,YAAaC,EAAauB,EAAbvB,cAAeC,EAAYsB,EAAZtB,aAKpC,OAAIA,EAAauB,WAAU,SAACC,GAAW,OAAKA,EAAYD,WAAU,SAAAE,GAAA,IAAAC,EAAAD,EAAGlI,OAAUvG,EAAK0O,EAAL1O,MAAOC,EAAMyO,EAANzO,OAAM,OAASD,EAAQ,GAAKC,EAAS,CAAC,KAAK,CAAC,KAAK,EAC/H2N,EAAU,EACHS,EAAc,CAAEzJ,OAAAA,EAAQM,eAAamD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOnD,GAAa,IAAE0I,QAASA,EAAU,WAEzF,EAEG,CAAEZ,aAAAA,EAAcF,YAAAA,EAAaC,cAAAA,EACxC,EACM4B,EAAuB,SAAHC,GAAA,IAAMhK,EAAMgK,EAANhK,OAAQM,EAAa0J,EAAb1J,cAAa,OAAQmJ,EAAc,CACvEzJ,OAAAA,EACAM,cAAAA,GACF,EAEI2J,EAA+B,SAAHC,GAAA,IAAMC,EAAoBD,EAApBC,qBAAsBpE,EAAQmE,EAARnE,SAAQ,OAAQL,EAAAA,cAAoB,OAAKjC,EAAAA,EAAAA,GAAA,GAAO0G,GAAwBpE,EAAS,EACzIqE,EAAiB,SAACvH,GACpB,IAAQvC,EAAyEuC,EAAzEvC,cAAe+J,EAA0DxH,EAA1DwH,YAAaC,EAA6CzH,EAA7CyH,aAAcpC,EAA+BrF,EAA/BqF,YAAaC,EAAkBtF,EAAlBsF,cACvDxG,EAA6BrB,EAA7BqB,OAAQjC,EAAqBY,EAArBZ,QAASC,EAAYW,EAAZX,QACzB,GAAe,YAAXgC,IAAyBuG,IAAgBC,EACzC,MAAO,gBAAP3F,OAAuB9C,GAAW4K,EAAe,GAAE,UAAA9H,OAAS8H,EAAY,KAE5E,IAAMjC,EAAaF,EAAcvI,QAAO,SAACC,EAAK3E,GAAK,OAAK2E,EAAM3E,CAAK,GAAE,GAC/DwN,EAAoBP,EAAcvI,QAAO,SAACC,EAAK3E,EAAO4G,GAAK,OAAKjC,GAAOqI,EAAYmC,GAAenC,EAAYpG,IAAU5G,CAAK,GAAE,GACrI,MAAO,gBAAPsH,OAAuBlH,GAAOgP,EAAe,GAAK5K,EAAU,EAAI4K,EAAe3K,EAAU+I,EAAmB,GAAE,UAAAlG,OAASlH,EAAM6M,EAAckC,GAAehC,EAAY,GAAE,OAAA7F,OAAM,EAAI7C,EAAO,MAC7L,EACM4K,EAA0B,SAAC1H,GAC7B,IAAQvC,EAA+HuC,EAA/HvC,cAAekK,EAAgH3H,EAAhH2H,sBAAuBzE,EAAyFlD,EAAzFkD,SAAQ0E,EAAiF5H,EAA/EsH,qBAAoBO,OAAA,IAAAD,EAA2C,CAAC,EAACA,EAAzCvH,EAAKwH,EAALxH,MAAUyH,GAAwBvH,EAAAA,EAAAA,GAAAsH,EAAAE,GAAYpF,GAAIpC,EAAAA,EAAAA,GAAKP,EAAKgI,GACtIV,GAAoB1G,EAAAA,EAAAA,GAAA,CACtBW,UAAW,4BACXlB,OAAKO,EAAAA,EAAAA,GAAA,CACDC,QAAS,OACT8C,cAAe,SACfC,SAAU,SACVC,WAAY,aACZtL,MAAOgP,EAAevH,GACtB8D,eAAyC,YAAzBrG,EAAcqB,OAAuB,gBAAkB,cACpEuB,IAEJyH,GAEP,OAAQjF,EAAAA,cAAoBA,EAAAA,SAAgB,MAAiC,OAA1B8E,QAA4D,IAA1BA,EAAmCA,EAAwBP,IAA4BxG,EAAAA,EAAAA,GAAA,CACxKnD,cAAAA,EACA6J,qBAAAA,EACApE,SAAAA,GACGP,IAEX,EAEMsF,EAAgB,SAACjI,GACnB,IAAQ7C,EAA+E6C,EAA/E7C,OAAQM,EAAuEuC,EAAvEvC,cAAegD,EAAwDT,EAAxDS,YAAakH,EAA2C3H,EAA3C2H,sBAAuB3D,EAAoBhE,EAApBgE,gBAC7DkE,EAAgBhB,EAAqB,CAAE/J,OAAAA,EAAQM,cAAAA,IACrD,IAAKyK,EACD,OAAO,KACX,IAAQ3C,EAA6C2C,EAA7C3C,aAAcD,EAA+B4C,EAA/B5C,cAAeD,EAAgB6C,EAAhB7C,YACrC,OAAQxC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAM0C,EAAavG,KAAI,SAAC4G,EAAQ4B,GAAW,OAAM3E,EAAAA,cAAoB6E,EAAyB,CAAExD,IAAK,UAAFvE,OAAY6H,GAAe/J,cAAeA,EAAe+J,YAAaA,EAAaC,aAAclC,EAAa1M,OAAQwM,YAAaA,EAAaC,cAAeA,EAAeqC,sBAAuBA,EAAuBL,qBAA0C,OAApBtD,QAAgD,IAApBA,OAA6B,EAASA,EAAgBsD,sBAAwB1B,EAAO5G,KAAI,SAAAmJ,GAAA,IAAGlL,EAAKkL,EAALlL,MAAO6B,EAAMqJ,EAANrJ,OAAM,OAAQ+D,EAAAA,cAAoB9C,EAAe,CAAEmE,IAAKjH,EAAMiH,KAAOjH,EAAMmE,IAAKnE,MAAOA,EAAO6B,OAAQA,EAAQrB,cAAeA,EAAegD,YAAaA,EAAaN,WAAgC,OAApB6D,QAAgD,IAApBA,OAA6B,EAASA,EAAgB7D,YAAa,IAAG,IACxxB,EAEMiI,EAAuB,SAAvBA,EAAwBpI,GAC1B,IAAQ7C,EAA0B6C,EAA1B7C,OAAQM,EAAkBuC,EAAlBvC,cACR0I,EAA8C1I,EAA9C0I,QAAStJ,EAAqCY,EAArCZ,QAASC,EAA4BW,EAA5BX,QACpBgJ,GADgDrI,EAAnBb,eACGC,GAAWsJ,EAAU,GAAK,EAAIrJ,EAAUqJ,GAAWA,EACzF,GAAIL,GAAe,EACf,OAAOK,EAAU,EACXiC,GAAoBxH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACjBZ,GAAK,IACRvC,eAAamD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOnD,GAAa,IAAE0I,QAASA,EAAU,YAExDrN,EAGV,IADA,IAAMuP,EAA6B,GAC1B3O,EAAI,EAAGA,EAAIyM,EAASzM,GAAK,EAC9B2O,EAA2B3O,GAAK,EAEpC,IAAM6L,EAAepI,EAAOJ,QAAO,SAACuL,EAAOrL,EAAOgC,GAC9C,IAAMsJ,EAAiBF,EAA2BtL,QAAO,SAACyL,EAAuBC,EAAM/O,GAAC,OAAK+O,EAAOJ,EAA2BG,GAAyB,EAAI9O,EAAI8O,CAAqB,GAAE,GAIvL,OAHAH,EAA2BE,GACvBF,EAA2BE,GAAkBzC,EAAczN,EAAM4E,GAASJ,EAAU,EAAIC,EAC5FwL,EAAMC,GAAgBzO,KAAK,CAAEmD,MAAAA,EAAOgC,MAAAA,IAC7BqJ,CACX,GAAGjC,MAAMC,KAAK,CAAEzN,OAAQsN,IAAWnH,KAAI,iBAAM,EAAE,KAC/C,OAAOuG,EAAavG,KAAI,SAAC4G,GAAM,OAAKA,EAAO5G,KAAI,SAAA0J,EAAmBtJ,GAAU,IAA1BnC,EAAKyL,EAALzL,MAAOgC,EAAKyJ,EAALzJ,MAAK,MAAoB,CAC9EhC,MAAAA,EACA6B,OAAQ,CACJvG,MAAOuN,EACPtN,OAAQsN,EAAczN,EAAM4E,GAC5BgC,MAAAA,EACAG,WAAAA,EACAC,YAAauG,EAAO/M,QAE3B,GAAE,GACP,EAEM8P,EAAgB,SAAC3I,GACnB,IAAQ7C,EAA+E6C,EAA/E7C,OAAQM,EAAuEuC,EAAvEvC,cAAegD,EAAwDT,EAAxDS,YAAakH,EAA2C3H,EAA3C2H,sBAAuB3D,EAAoBhE,EAApBgE,gBAC7D4E,EAAgBR,EAAqB,CAAEjL,OAAAA,EAAQM,cAAAA,IACrD,OAAKmL,EAEG/F,EAAAA,cAAoBA,EAAAA,SAAgB,KAAM+F,EAAc5J,KAAI,SAAC4G,EAAQ4B,GAAW,OAAM3E,EAAAA,cAAoB6E,EAAyB,CAAExD,IAAK,kBAAFvE,OAAoB6H,GAAe/J,cAAeA,EAAegK,aAAcmB,EAAc/P,OAAQ2O,YAAaA,EAAaG,sBAAuBA,EAAuBL,qBAA0C,OAApBtD,QAAgD,IAApBA,OAA6B,EAASA,EAAgBsD,sBAAwB1B,EAAO5G,KAAI,SAAA6J,GAAA,IAAG5L,EAAK4L,EAAL5L,MAAO6B,EAAM+J,EAAN/J,OAAM,OAAQ+D,EAAAA,cAAoB9C,EAAe,CAAEmE,IAAKjH,EAAMiH,KAAOjH,EAAMmE,IAAKnE,MAAOA,EAAO6B,OAAQA,EAAQrB,cAAeA,EAAegD,YAAaA,EAAaN,WAAgC,OAApB6D,QAAgD,IAApBA,OAA6B,EAASA,EAAgB7D,YAAa,IAAG,KAD3tB,IAEf,EAEM2I,EAAyB,SAAHC,GAAA,IAAMC,EAAcD,EAAdC,eAAgB9F,EAAQ6F,EAAR7F,SAAU+F,EAAYF,EAAZE,aAAY,OAAQpG,EAAAA,cAAoB,OAAKjC,EAAAA,EAAAA,GAAA,CAAIsI,IAAKD,GAAiBD,GAAkB9F,EAAS,EACxJiG,EAAoB,SAACnJ,GACvB,IAAQlB,EAA4GkB,EAA5GlB,OAAQsK,EAAoGpJ,EAApGoJ,gBAAiBlG,EAAmFlD,EAAnFkD,SAAU+F,EAAyEjJ,EAAzEiJ,aAAYI,EAA6DrJ,EAA3DgJ,eAAcM,OAAA,IAAAD,EAAqC,CAAC,EAACA,EAAnChJ,EAAKiJ,EAALjJ,MAAUkJ,GAAkBhJ,EAAAA,EAAAA,GAAA+I,EAAAE,GACjGR,GAAcpI,EAAAA,EAAAA,GAAA,CAChBW,UAAW,wCAAF5B,OAA0Cb,GACnDuB,OAAKO,EAAAA,EAAAA,GAAA,CACDC,QAAS,OACT+C,SAAU,SACVE,eAAgB,gBAChBH,cAA0B,SAAX7E,EAAoB,SAAW,OAC3CuB,IAEJkJ,GAEP,OAAQ1G,EAAAA,cAAoBA,EAAAA,SAAgB,MAA2B,OAApBuG,QAAgD,IAApBA,EAA6BA,EAAkBN,GAAwB,CAClJE,eAAAA,EACAC,aAAAA,EACAnK,OAAAA,EACAoE,SAAAA,IAER,EAUMuG,EAAwB,SAACC,EAAKC,GAA+C,IAA3CC,EAAiBD,EAAjBC,kBAAmBC,EAAiBF,EAAjBE,kBAC/CjN,EAAmC8M,EAAnC9M,eAAgBkN,EAAmBJ,EAAnBI,eACxB,YAAuBhR,IAAnB8D,QACmB9D,IAAnBgR,QACsBhR,IAAtB8Q,QACsB9Q,IAAtB+Q,GACAD,EAAoBhN,GACpBgN,EAAoBhN,GAAkB,IACtCiN,EAAoBC,EACb,CAAElN,eAAAA,EAAgBkN,eAAgBD,GAEtCjN,IAAmBgN,GAAqBE,IAAmBD,EAC5D,CAAEjN,eAAgBgN,EAAmBE,eAAgBD,GACrDH,CACV,EACMK,EAAwB,SAAC3O,EAAI4O,GAC/B,IAAIzR,EAAe,OAAP6C,QAAsB,IAAPA,OAAgB,EAASA,EAAG6O,YACvD,QAAcnR,IAAVP,GAAuByR,GAAeA,EAAYnR,OAAS,EAAG,CAC9D,IAAMqR,GAASvF,EAAAA,EAAAA,GAAIqF,EAAYG,QAAO,SAACC,GAAC,OAAKA,EAAI,CAAC,KAAGrI,MAAK,SAACzG,EAAGC,GAAC,OAAKA,EAAID,CAAC,IACzE4O,EAAOpQ,KAAKd,KAAKkB,MAAMgQ,EAAOA,EAAOrR,OAAS,GAAK,IACnD,IAAMwR,EAAY9R,EAClBA,EAAQ2R,EAAOrI,MAAK,SAACyI,EAAYrL,GAAK,OAAKqL,GAAcD,GAAapL,IAAUiL,EAAOrR,OAAS,CAAC,GACrG,CACA,OAAON,CACX,EAyBMyR,EAAcO,OAAOC,OAAO,CAAC,KAAM,IAAK,IAAK,IAC7CC,EAAS,SAAC/R,EAAOkE,GAAc,MAAsB,oBAAVlE,EAAuBA,EAAMkE,GAAkBlE,CAAK,EAC/FgS,EAAkB,SAAChS,EAAOkE,GAAc,MAAsB,qBAAVlE,EAAwB+R,EAAO/R,EAAOkE,QAAkB9D,CAAS,EACrH6R,EAAwB,SAACC,EAAQhO,GACnC,IAAMqC,EAAQ+K,EAAYlD,WAAU,SAACwD,GAAU,OAAKA,GAAc1N,CAAc,IAChF,OAAO6N,EAAOG,EAAO3L,GAAS,EAAIA,EAAQ,GAAIrC,EAClD,EACMiO,EAA6B,SAACC,EAAWlO,EAAgBgO,GAAyB,IAAjBG,EAAQnS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EACxEF,EAAQgS,EAAgBI,EAAWlO,GACzC,OAAO5D,KAAKP,MAAMO,KAAKqB,SAAcvB,IAAVJ,EAAsBiS,EAAsBC,EAAQhO,GAAkBlE,EAAOqS,GAC5G,EAmBMC,EAAe,SAAChL,EAAOpD,EAAgBoH,GACzC,IAAQ7G,EAA2E6C,EAA3E7C,OAAQ2B,EAAmEkB,EAAnElB,OAAQ2B,EAA2DT,EAA3DS,YAAa6C,EAA8CtD,EAA9CsD,mBAAoBqE,EAA0B3H,EAA1B2H,sBACnDlK,EAnBmB,SAAHwN,GAAA,IAAMnM,EAAMmM,EAANnM,OAAQ4B,EAAOuK,EAAPvK,QAAS9D,EAAcqO,EAAdrO,eAAgBQ,EAAe6N,EAAf7N,gBAAiBM,EAAcuN,EAAdvN,eAAgByI,EAAO8E,EAAP9E,QAAStJ,EAAOoO,EAAPpO,QAASC,EAAOmO,EAAPnO,QAAS6E,EAAKsJ,EAALtJ,MAAK,MAAS,CACvI7C,OAAAA,EACA4B,QAAAA,EACA9D,eAAAA,EACAuJ,QAAS0E,EAA2B1E,EAASvJ,EAAgB,CAAC,EAAG,EAAG,EAAG,GAAI,GAC3EC,QAASgO,EAA2BhO,EAASD,EAAgB,CAAC,GAAI,GAAI,GAAI,IAC1EE,QAAS+N,EAA2B/N,EAASF,EAAgB,CAAC,EAAG,EAAG,EAAG,EAAG,IAC1EQ,gBAAiByN,EAA2BzN,EAAiBR,EAAgB,CACzE,SAACsO,GAAC,OAAKA,EAAI,CAAC,EACZ,SAACA,GAAC,OAAKA,EAAI,CAAC,EACZ,SAACA,GAAC,OAAKA,EAAI,CAAC,EACZ,SAACA,GAAC,OAAKA,EAAI,CAAC,IAEhBxN,eAAgBgN,EAAgBhN,EAAgBd,GAChD+E,MAAAA,EACH,CAIyBwJ,EAAoBvK,EAAAA,EAAAA,GAAC,CAAEhE,eAAAA,GAAmBoD,IAC1DoL,EAAoB,CAAEjO,OAAAA,EAAQsD,YAAAA,EAAauD,gBAAAA,GACjD,MAAe,SAAXlF,EACQ+D,EAAAA,cAAoBkB,GAAUnD,EAAAA,EAAAA,GAAA,CAAInD,cAAeA,EAAe6F,mBAAoBA,GAAuB8H,IAExG,YAAXtM,EACQ+D,EAAAA,cAAoBoF,GAAarH,EAAAA,EAAAA,GAAA,CAAInD,cAAeA,EAAekK,sBAAuBA,GAA0ByD,IAExHvI,EAAAA,cAAoB8F,GAAa/H,EAAAA,EAAAA,GAAA,CAAInD,cAAeA,EAAekK,sBAAuBA,GAA0ByD,GAChI,EACMC,EAAa,SAACrL,GAChB,IAAQ7C,EAAwE6C,EAAxE7C,OAAQ2B,EAAgEkB,EAAhElB,OAAQsK,EAAwDpJ,EAAxDoJ,gBAAiBkC,EAAuCtL,EAAvCsL,sBACzCC,EAnEsB,SAACvB,EAAasB,GACpC,IAAAE,EAAuC3I,EAAAA,WAAiB4G,EAAuB,CAC3E7M,eAAgB0O,IAClBG,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAFO5O,EAAc6O,EAAA,GAAd7O,eAAkB+O,EAAQF,EAAA,GAG7BvC,EAAMrG,EAAAA,OAAa,MACnB+I,EAAc/I,EAAAA,SAgBpB,MAAO,CAAEoG,aAfYpG,EAAAA,aAAkB,SAACtG,GACpC,IAAI4B,EAC2B,QAA9BA,EAAKyN,EAAYC,eAA4B,IAAP1N,GAAyBA,EAAG2N,aACnEF,EAAYC,aAAU/S,EACtBoQ,EAAI2C,QAAUtP,EACd,IAAMwP,EAAc,WAAH,OAASJ,EAAS,CAC/B/B,kBAAmBG,EAAsBb,EAAI2C,QAAS7B,GACtDH,kBAAmBmC,OAAOC,WAAaC,SAASC,gBAAgBlC,aAClE,EACF8B,IACIxP,GAAkC,qBAAnB6P,iBACfR,EAAYC,QAAU,IAAIO,eAAeL,GACzCH,EAAYC,QAAQQ,QAAQ9P,GAEpC,GAAG,CAACyN,IACmBpN,eAAAA,EAC3B,CA6C6C0P,CApG5B,SAACC,GACd,IAAMrD,EAAMrG,EAAAA,OAAa0J,GAIzB,OAHKA,GAAUrD,EAAI2C,SAAWU,EAAMpK,SAAW+G,EAAI2C,QAAQ1J,SACvD+G,EAAI2C,QAAUU,GAEXrD,EAAI2C,OACf,CA8F+DW,CADqBxM,EAAhBgK,aACkBsB,GAA1ErC,EAAYsC,EAAZtC,aAAcrM,EAAc2O,EAAd3O,eACtB,IAAKkC,IAAW,CAAC,OAAQ,UAAW,WAAW2N,SAAS3N,KAAYuH,MAAMqG,QAAQvP,GAC9E,OAAO,KACX,IAAM6G,EAlBqB,SAACA,EAAiBpH,GAAc,MAAgC,oBAApBoH,EAAiCA,EAAgBpH,GAAkBoH,CAAe,CAkBjI2I,CAAuB3M,EAAMgE,gBAAiBpH,GACtE,OAAQiG,EAAAA,cAAoBsG,EAAmB,CAAErK,OAAQA,EAAQmK,aAAcA,EAAcG,gBAAiBA,EAAiBJ,eAAoC,OAApBhF,QAAgD,IAApBA,OAA6B,EAASA,EAAgBgF,gBAAkBpM,EAAiBoO,EAAahL,EAAOpD,EAAgBoH,GAAmB,KAC/T,C","sources":["../node_modules/react-photo-album/dist/index.mjs"],"sourcesContent":["import * as React from 'react';\n\nconst ratio = ({ width, height }) => width / height;\n\nconst round = (value, decimals = 0) => {\n    const factor = 10 ** decimals;\n    return Math.round((value + Number.EPSILON) * factor) / factor;\n};\n\nconst RankingFunctionComparator = (rank) => (a, b) => rank(b) - rank(a);\nconst MinHeap = (comparator) => {\n    const heap = [];\n    const compare = comparator;\n    let n = 0;\n    const greater = (i, j) => compare(heap[i], heap[j]) < 0;\n    const swap = (i, j) => {\n        const temp = heap[i];\n        heap[i] = heap[j];\n        heap[j] = temp;\n    };\n    const swim = (i) => {\n        let k = i;\n        let k2 = Math.floor(k / 2);\n        while (k > 1 && greater(k2, k)) {\n            swap(k2, k);\n            k = k2;\n            k2 = Math.floor(k / 2);\n        }\n    };\n    const sink = (i) => {\n        let k = i;\n        let k2 = k * 2;\n        while (k2 <= n) {\n            if (k2 < n && greater(k2, k2 + 1))\n                k2 += 1;\n            if (!greater(k, k2))\n                break;\n            swap(k, k2);\n            k = k2;\n            k2 = k * 2;\n        }\n    };\n    return {\n        push: (element) => {\n            n += 1;\n            heap[n] = element;\n            swim(n);\n        },\n        pop: () => {\n            if (n === 0)\n                return undefined;\n            swap(1, n);\n            n -= 1;\n            const max = heap.pop();\n            sink(1);\n            return max;\n        },\n        size: () => n,\n    };\n};\n\nconst buildPrecedentsMap = (graph, startNode, endNode) => {\n    const precedentsMap = new Map();\n    const visited = new Set();\n    const storedShortestPaths = new Map();\n    storedShortestPaths.set(startNode, 0);\n    const pQueue = MinHeap(RankingFunctionComparator((el) => el.weight));\n    pQueue.push({ id: startNode, weight: 0 });\n    while (pQueue.size() > 0) {\n        const { id, weight } = pQueue.pop();\n        if (!visited.has(id)) {\n            const neighboringNodes = graph(id);\n            visited.add(id);\n            neighboringNodes.forEach((neighborWeight, neighbor) => {\n                const newWeight = weight + neighborWeight;\n                const currentId = precedentsMap.get(neighbor);\n                const currentWeight = storedShortestPaths.get(neighbor);\n                if (currentWeight === undefined ||\n                    (currentWeight > newWeight &&\n                        (currentWeight / newWeight > 1.005 || (currentId !== undefined && currentId < id)))) {\n                    storedShortestPaths.set(neighbor, newWeight);\n                    pQueue.push({ id: neighbor, weight: newWeight });\n                    precedentsMap.set(neighbor, id);\n                }\n            });\n        }\n    }\n    return storedShortestPaths.has(endNode) ? precedentsMap : undefined;\n};\nconst getPathFromPrecedentsMap = (precedentsMap, endNode) => {\n    const nodes = [];\n    for (let node = endNode; node !== undefined; node = precedentsMap.get(node)) {\n        nodes.push(node);\n    }\n    return nodes.reverse();\n};\nconst findShortestPath = (graph, startNode, endNode) => {\n    const precedentsMap = buildPrecedentsMap(graph, startNode, endNode);\n    return precedentsMap ? getPathFromPrecedentsMap(precedentsMap, endNode) : undefined;\n};\n\nconst findIdealNodeSearch = ({ photos, targetRowHeight, containerWidth, }) => {\n    const minRatio = photos.reduce((acc, photo) => Math.min(ratio(photo), acc), Number.MAX_VALUE);\n    return round(containerWidth / targetRowHeight / minRatio) + 2;\n};\nconst getCommonHeight = (row, containerWidth, spacing, padding) => {\n    const rowWidth = containerWidth - (row.length - 1) * spacing - 2 * padding * row.length;\n    const totalAspectRatio = row.reduce((acc, photo) => acc + ratio(photo), 0);\n    return rowWidth / totalAspectRatio;\n};\nconst cost = (photos, i, j, width, targetRowHeight, spacing, padding) => {\n    const row = photos.slice(i, j);\n    const commonHeight = getCommonHeight(row, width, spacing, padding);\n    return commonHeight > 0 ? (commonHeight - targetRowHeight) ** 2 * row.length : undefined;\n};\nconst makeGetRowNeighbors = ({ photos, layoutOptions, targetRowHeight, limitNodeSearch, rowConstraints, }) => (node) => {\n    var _a, _b;\n    const { containerWidth, spacing, padding } = layoutOptions;\n    const results = new Map();\n    results.set(node, 0);\n    const startOffset = (_a = rowConstraints === null || rowConstraints === void 0 ? void 0 : rowConstraints.minPhotos) !== null && _a !== void 0 ? _a : 1;\n    const endOffset = Math.min(limitNodeSearch, (_b = rowConstraints === null || rowConstraints === void 0 ? void 0 : rowConstraints.maxPhotos) !== null && _b !== void 0 ? _b : Infinity);\n    for (let i = node + startOffset; i < photos.length + 1; i += 1) {\n        if (i - node > endOffset)\n            break;\n        const currentCost = cost(photos, node, i, containerWidth, targetRowHeight, spacing, padding);\n        if (currentCost === undefined)\n            break;\n        results.set(i, currentCost);\n    }\n    return results;\n};\nconst computeRowsLayout = ({ photos, layoutOptions, }) => {\n    const { spacing, padding, containerWidth, targetRowHeight, rowConstraints } = layoutOptions;\n    const limitNodeSearch = findIdealNodeSearch({ photos, containerWidth, targetRowHeight });\n    const getNeighbors = makeGetRowNeighbors({\n        photos,\n        layoutOptions,\n        targetRowHeight,\n        limitNodeSearch,\n        rowConstraints,\n    });\n    const path = findShortestPath(getNeighbors, 0, photos.length);\n    if (path === undefined)\n        return undefined;\n    const layout = [];\n    for (let i = 1; i < path.length; i += 1) {\n        const row = photos.map((photo, index) => ({ photo, index })).slice(path[i - 1], path[i]);\n        const height = getCommonHeight(row.map(({ photo }) => photo), containerWidth, spacing, padding);\n        layout.push(row.map(({ photo, index }, photoIndex) => ({\n            photo,\n            layout: {\n                height,\n                width: height * ratio(photo),\n                index,\n                photoIndex,\n                photosCount: row.length,\n            },\n        })));\n    }\n    return layout;\n};\n\nconst calcWidth = (base, { width, photosCount }, { spacing, padding, containerWidth }) => {\n    const gaps = spacing * (photosCount - 1) + 2 * padding * photosCount;\n    return `calc((${base} - ${gaps}px) / ${round((containerWidth - gaps) / width, 5)})`;\n};\nconst cssPhotoWidth = (layout, layoutOptions) => layoutOptions.layout !== \"rows\"\n    ? `calc(100% - ${2 * layoutOptions.padding}px)`\n    : calcWidth(\"100%\", layout, layoutOptions);\nconst calculateSizesValue = (size, layout, layoutOptions) => { var _a, _b; return calcWidth((_b = (_a = size.match(/calc\\((.*)\\)/)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : size, layout, layoutOptions); };\nconst srcSetAndSizes = (photo, layout, layoutOptions) => {\n    let srcSet;\n    let sizes;\n    if (photo.images && photo.images.length > 0) {\n        srcSet = photo.images\n            .concat(!photo.images.find(({ width }) => width === photo.width)\n            ? [{ src: photo.src, width: photo.width, height: photo.height }]\n            : [])\n            .sort((first, second) => first.width - second.width)\n            .map((image) => `${image.src} ${image.width}w`)\n            .join(\", \");\n        if (layoutOptions.sizes) {\n            sizes = (layoutOptions.sizes.sizes || [])\n                .map(({ viewport, size }) => `${viewport} ${calculateSizesValue(size, layout, layoutOptions)}`)\n                .concat(calculateSizesValue(layoutOptions.sizes.size, layout, layoutOptions))\n                .join(\", \");\n        }\n        else {\n            sizes = `${Math.ceil((layout.width / layoutOptions.containerWidth) * 100)}vw`;\n        }\n    }\n    return { srcSet, sizes };\n};\nconst PhotoRenderer = (props) => {\n    var _a, _b;\n    const { photo, layout, layoutOptions, imageProps: { style, ...restImageProps } = {}, renderPhoto } = props;\n    const { onClick } = layoutOptions;\n    const imageStyle = {\n        display: \"block\",\n        boxSizing: \"content-box\",\n        width: cssPhotoWidth(layout, layoutOptions),\n        height: \"auto\",\n        aspectRatio: `${photo.width} / ${photo.height}`,\n        ...(layoutOptions.padding ? { padding: `${layoutOptions.padding}px` } : null),\n        ...((layoutOptions.layout === \"columns\" || layoutOptions.layout === \"masonry\") &&\n            layout.photoIndex < layout.photosCount - 1\n            ? { marginBottom: `${layoutOptions.spacing}px` }\n            : null),\n        ...(onClick ? { cursor: \"pointer\" } : null),\n        ...style,\n    };\n    const handleClick = onClick\n        ? (event) => {\n            onClick({ event, photo, index: layout.index });\n        }\n        : undefined;\n    const imageProps = {\n        src: photo.src,\n        alt: (_a = photo.alt) !== null && _a !== void 0 ? _a : \"\",\n        title: photo.title,\n        onClick: handleClick,\n        style: imageStyle,\n        className: \"react-photo-album--photo\",\n        loading: \"lazy\",\n        decoding: \"async\",\n        ...srcSetAndSizes(photo, layout, layoutOptions),\n        ...restImageProps,\n    };\n    const renderDefaultPhoto = ({ wrapped } = {}) => {\n        const { src, alt, srcSet, sizes, style: unwrappedStyle, ...rest } = imageProps;\n        return (React.createElement(\"img\", { alt: alt, ...(srcSet ? { srcSet, sizes } : null), src: src, style: wrapped ? { display: \"block\", width: \"100%\", height: \"100%\" } : unwrappedStyle, ...rest }));\n    };\n    const wrapperStyle = (({ display, boxSizing, width, aspectRatio, padding, marginBottom, cursor }) => ({\n        display,\n        boxSizing,\n        width,\n        aspectRatio,\n        padding,\n        marginBottom,\n        cursor,\n    }))(imageStyle);\n    return (React.createElement(React.Fragment, null, (_b = renderPhoto === null || renderPhoto === void 0 ? void 0 : renderPhoto({\n        photo,\n        layout,\n        layoutOptions,\n        imageProps,\n        renderDefaultPhoto,\n        wrapperStyle,\n    })) !== null && _b !== void 0 ? _b : renderDefaultPhoto()));\n};\n\nconst defaultRenderRowContainer = ({ rowContainerProps, children, }) => React.createElement(\"div\", { ...rowContainerProps }, children);\nconst RowContainerRenderer = (props) => {\n    const { layoutOptions, rowIndex, rowsCount, renderRowContainer, rowContainerProps: { style, ...restRowContainerProps } = {}, children, } = props;\n    const rowContainerProps = {\n        className: \"react-photo-album--row\",\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            flexWrap: \"nowrap\",\n            alignItems: \"flex-start\",\n            justifyContent: \"space-between\",\n            ...(rowIndex < rowsCount - 1 ? { marginBottom: `${layoutOptions.spacing}px` } : null),\n            ...style,\n        },\n        ...restRowContainerProps,\n    };\n    return (React.createElement(React.Fragment, null, (renderRowContainer !== null && renderRowContainer !== void 0 ? renderRowContainer : defaultRenderRowContainer)({\n        layoutOptions,\n        rowIndex,\n        rowsCount,\n        rowContainerProps,\n        children,\n    })));\n};\n\nconst RowsLayout = (props) => {\n    const { photos, layoutOptions, renderPhoto, renderRowContainer, componentsProps } = props;\n    const rowsLayout = computeRowsLayout({ photos, layoutOptions });\n    if (!rowsLayout)\n        return null;\n    return (React.createElement(React.Fragment, null, rowsLayout.map((row, rowIndex) => (React.createElement(RowContainerRenderer, { key: `row-${rowIndex}`, layoutOptions: layoutOptions, rowIndex: rowIndex, rowsCount: rowsLayout.length, renderRowContainer: renderRowContainer, rowContainerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.rowContainerProps }, row.map(({ photo, layout }) => (React.createElement(PhotoRenderer, { key: photo.key || photo.src, photo: photo, layout: layout, layoutOptions: layoutOptions, renderPhoto: renderPhoto, imageProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.imageProps }))))))));\n};\n\nconst computeShortestPath = (graph, pathLength, startNode, endNode) => {\n    const matrix = new Map();\n    const queue = new Set();\n    queue.add(startNode);\n    for (let length = 0; length < pathLength; length += 1) {\n        const currentQueue = [...queue.keys()];\n        queue.clear();\n        currentQueue.forEach((node) => {\n            const accumulatedWeight = length > 0 ? matrix.get(node)[length].weight : 0;\n            graph(node).forEach(({ neighbor, weight }) => {\n                let paths = matrix.get(neighbor);\n                if (!paths) {\n                    paths = [];\n                    matrix.set(neighbor, paths);\n                }\n                const newWeight = accumulatedWeight + weight;\n                const nextPath = paths[length + 1];\n                if (!nextPath ||\n                    (nextPath.weight > newWeight && (nextPath.weight / newWeight > 1.0001 || node < nextPath.node))) {\n                    paths[length + 1] = { node, weight: newWeight };\n                }\n                if (length < pathLength - 1 && neighbor !== endNode) {\n                    queue.add(neighbor);\n                }\n            });\n        });\n    }\n    return matrix;\n};\nconst reconstructShortestPath = (matrix, pathLength, endNode) => {\n    const path = [endNode];\n    for (let node = endNode, length = pathLength; length > 0; length -= 1) {\n        node = matrix.get(node)[length].node;\n        path.push(node);\n    }\n    return path.reverse();\n};\nconst findShortestPathLengthN = (graph, pathLength, startNode, endNode) => reconstructShortestPath(computeShortestPath(graph, pathLength, startNode, endNode), pathLength, endNode);\n\nconst makeGetColumnNeighbors = ({ photos, spacing, padding, targetColumnWidth, targetColumnHeight, }) => (node) => {\n    const results = [];\n    const cutOffHeight = targetColumnHeight * 1.5;\n    let height = targetColumnWidth / ratio(photos[node]) + 2 * padding;\n    for (let i = node + 1; i < photos.length + 1; i += 1) {\n        results.push({ neighbor: i, weight: (targetColumnHeight - height) ** 2 });\n        if (height > cutOffHeight || i === photos.length) {\n            break;\n        }\n        height += targetColumnWidth / ratio(photos[i]) + spacing + 2 * padding;\n    }\n    return results;\n};\nconst buildColumnsModel = ({ path, photos, containerWidth, columnsGaps, columnsRatios, spacing, padding, }) => {\n    const columnsModel = [];\n    const totalRatio = columnsRatios.reduce((total, columnRatio) => total + columnRatio, 0);\n    for (let i = 0; i < path.length - 1; i += 1) {\n        const column = photos.map((photo, index) => ({ photo, index })).slice(path[i], path[i + 1]);\n        const totalAdjustedGaps = columnsRatios.reduce((total, columnRatio, index) => total + (columnsGaps[i] - columnsGaps[index]) * columnRatio, 0);\n        const columnWidth = ((containerWidth - (path.length - 2) * spacing - 2 * (path.length - 1) * padding - totalAdjustedGaps) *\n            columnsRatios[i]) /\n            totalRatio;\n        columnsModel.push(column.map(({ photo, index }, photoIndex) => ({\n            photo,\n            layout: {\n                width: columnWidth,\n                height: columnWidth / ratio(photo),\n                index,\n                photoIndex,\n                photosCount: column.length,\n            },\n        })));\n    }\n    return columnsModel;\n};\nconst computeColumnsModel = ({ photos, layoutOptions, targetColumnWidth, }) => {\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n    const columnsGaps = [];\n    const columnsRatios = [];\n    if (photos.length <= columns) {\n        const averageRatio = photos.length > 0 ? photos.reduce((acc, photo) => acc + ratio(photo), 0) / photos.length : 1;\n        for (let i = 0; i < columns; i += 1) {\n            columnsGaps[i] = 2 * padding;\n            columnsRatios[i] = i < photos.length ? ratio(photos[i]) : averageRatio;\n        }\n        const columnsModel = buildColumnsModel({\n            path: Array.from({ length: columns + 1 }).map((_, index) => Math.min(index, photos.length)),\n            photos,\n            columnsRatios,\n            columnsGaps,\n            containerWidth,\n            spacing,\n            padding,\n        });\n        return { columnsGaps, columnsRatios, columnsModel };\n    }\n    const targetColumnHeight = (photos.reduce((acc, photo) => acc + targetColumnWidth / ratio(photo), 0) +\n        spacing * (photos.length - columns) +\n        2 * padding * photos.length) /\n        columns;\n    const getNeighbors = makeGetColumnNeighbors({\n        photos,\n        targetColumnWidth,\n        targetColumnHeight,\n        spacing,\n        padding,\n    });\n    const path = findShortestPathLengthN(getNeighbors, columns, 0, photos.length);\n    for (let i = 0; i < path.length - 1; i += 1) {\n        const column = photos.slice(path[i], path[i + 1]);\n        columnsGaps[i] = spacing * (column.length - 1) + 2 * padding * column.length;\n        columnsRatios[i] = 1 / column.reduce((acc, photo) => acc + 1 / ratio(photo), 0);\n    }\n    const columnsModel = buildColumnsModel({\n        path,\n        photos,\n        columnsRatios,\n        columnsGaps,\n        containerWidth,\n        spacing,\n        padding,\n    });\n    return { columnsGaps, columnsRatios, columnsModel };\n};\nconst computeLayout = (props) => {\n    const { photos, layoutOptions } = props;\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n    const targetColumnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n    const { columnsGaps, columnsRatios, columnsModel } = computeColumnsModel({\n        photos,\n        layoutOptions,\n        targetColumnWidth,\n    });\n    if (columnsModel.findIndex((columnModel) => columnModel.findIndex(({ layout: { width, height } }) => width < 0 || height < 0) >= 0) >= 0) {\n        if (columns > 1) {\n            return computeLayout({ photos, layoutOptions: { ...layoutOptions, columns: columns - 1 } });\n        }\n        return undefined;\n    }\n    return { columnsModel, columnsGaps, columnsRatios };\n};\nconst computeColumnsLayout = ({ photos, layoutOptions, }) => computeLayout({\n    photos,\n    layoutOptions,\n});\n\nconst defaultRenderColumnContainer = ({ columnContainerProps, children, }) => React.createElement(\"div\", { ...columnContainerProps }, children);\nconst cssColumnWidth = (props) => {\n    const { layoutOptions, columnIndex, columnsCount, columnsGaps, columnsRatios } = props;\n    const { layout, spacing, padding } = layoutOptions;\n    if (layout === \"masonry\" || !columnsGaps || !columnsRatios) {\n        return `calc((100% - ${spacing * (columnsCount - 1)}px) / ${columnsCount})`;\n    }\n    const totalRatio = columnsRatios.reduce((acc, ratio) => acc + ratio, 0);\n    const totalAdjustedGaps = columnsRatios.reduce((acc, ratio, index) => acc + (columnsGaps[columnIndex] - columnsGaps[index]) * ratio, 0);\n    return `calc((100% - ${round((columnsCount - 1) * spacing + 2 * columnsCount * padding + totalAdjustedGaps, 3)}px) * ${round(columnsRatios[columnIndex] / totalRatio, 5)} + ${2 * padding}px)`;\n};\nconst ColumnContainerRenderer = (props) => {\n    const { layoutOptions, renderColumnContainer, children, columnContainerProps: { style, ...restColumnContainerProps } = {}, ...rest } = props;\n    const columnContainerProps = {\n        className: \"react-photo-album--column\",\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            flexWrap: \"nowrap\",\n            alignItems: \"flex-start\",\n            width: cssColumnWidth(props),\n            justifyContent: layoutOptions.layout === \"columns\" ? \"space-between\" : \"flex-start\",\n            ...style,\n        },\n        ...restColumnContainerProps,\n    };\n    return (React.createElement(React.Fragment, null, (renderColumnContainer !== null && renderColumnContainer !== void 0 ? renderColumnContainer : defaultRenderColumnContainer)({\n        layoutOptions,\n        columnContainerProps,\n        children,\n        ...rest,\n    })));\n};\n\nconst ColumnsLayout = (props) => {\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps } = props;\n    const columnsLayout = computeColumnsLayout({ photos, layoutOptions });\n    if (!columnsLayout)\n        return null;\n    const { columnsModel, columnsRatios, columnsGaps } = columnsLayout;\n    return (React.createElement(React.Fragment, null, columnsModel.map((column, columnIndex) => (React.createElement(ColumnContainerRenderer, { key: `column-${columnIndex}`, layoutOptions: layoutOptions, columnIndex: columnIndex, columnsCount: columnsModel.length, columnsGaps: columnsGaps, columnsRatios: columnsRatios, renderColumnContainer: renderColumnContainer, columnContainerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.columnContainerProps }, column.map(({ photo, layout }) => (React.createElement(PhotoRenderer, { key: photo.key || photo.src, photo: photo, layout: layout, layoutOptions: layoutOptions, renderPhoto: renderPhoto, imageProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.imageProps }))))))));\n};\n\nconst computeMasonryLayout = (props) => {\n    const { photos, layoutOptions } = props;\n    const { columns, spacing, padding, containerWidth } = layoutOptions;\n    const columnWidth = (containerWidth - spacing * (columns - 1) - 2 * padding * columns) / columns;\n    if (columnWidth <= 0) {\n        return columns > 1\n            ? computeMasonryLayout({\n                ...props,\n                layoutOptions: { ...layoutOptions, columns: columns - 1 },\n            })\n            : undefined;\n    }\n    const columnsCurrentTopPositions = [];\n    for (let i = 0; i < columns; i += 1) {\n        columnsCurrentTopPositions[i] = 0;\n    }\n    const columnsModel = photos.reduce((model, photo, index) => {\n        const shortestColumn = columnsCurrentTopPositions.reduce((currentShortestColumn, item, i) => item < columnsCurrentTopPositions[currentShortestColumn] - 1 ? i : currentShortestColumn, 0);\n        columnsCurrentTopPositions[shortestColumn] =\n            columnsCurrentTopPositions[shortestColumn] + columnWidth / ratio(photo) + spacing + 2 * padding;\n        model[shortestColumn].push({ photo, index });\n        return model;\n    }, Array.from({ length: columns }).map(() => []));\n    return columnsModel.map((column) => column.map(({ photo, index }, photoIndex) => ({\n        photo,\n        layout: {\n            width: columnWidth,\n            height: columnWidth / ratio(photo),\n            index,\n            photoIndex,\n            photosCount: column.length,\n        },\n    })));\n};\n\nconst MasonryLayout = (props) => {\n    const { photos, layoutOptions, renderPhoto, renderColumnContainer, componentsProps } = props;\n    const masonryLayout = computeMasonryLayout({ photos, layoutOptions });\n    if (!masonryLayout)\n        return null;\n    return (React.createElement(React.Fragment, null, masonryLayout.map((column, columnIndex) => (React.createElement(ColumnContainerRenderer, { key: `masonry-column-${columnIndex}`, layoutOptions: layoutOptions, columnsCount: masonryLayout.length, columnIndex: columnIndex, renderColumnContainer: renderColumnContainer, columnContainerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.columnContainerProps }, column.map(({ photo, layout }) => (React.createElement(PhotoRenderer, { key: photo.key || photo.src, photo: photo, layout: layout, layoutOptions: layoutOptions, renderPhoto: renderPhoto, imageProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.imageProps }))))))));\n};\n\nconst defaultRenderContainer = ({ containerProps, children, containerRef }) => (React.createElement(\"div\", { ref: containerRef, ...containerProps }, children));\nconst ContainerRenderer = (props) => {\n    const { layout, renderContainer, children, containerRef, containerProps: { style, ...restContainerProps } = {}, } = props;\n    const containerProps = {\n        className: `react-photo-album react-photo-album--${layout}`,\n        style: {\n            display: \"flex\",\n            flexWrap: \"nowrap\",\n            justifyContent: \"space-between\",\n            flexDirection: layout === \"rows\" ? \"column\" : \"row\",\n            ...style,\n        },\n        ...restContainerProps,\n    };\n    return (React.createElement(React.Fragment, null, (renderContainer !== null && renderContainer !== void 0 ? renderContainer : defaultRenderContainer)({\n        containerProps,\n        containerRef,\n        layout,\n        children,\n    })));\n};\n\nconst useArray = (array) => {\n    const ref = React.useRef(array);\n    if (!array || !ref.current || array.join() !== ref.current.join()) {\n        ref.current = array;\n    }\n    return ref.current;\n};\n\nconst containerWidthReducer = (state, { newContainerWidth, newScrollbarWidth }) => {\n    const { containerWidth, scrollbarWidth } = state;\n    if (containerWidth !== undefined &&\n        scrollbarWidth !== undefined &&\n        newContainerWidth !== undefined &&\n        newScrollbarWidth !== undefined &&\n        newContainerWidth > containerWidth &&\n        newContainerWidth - containerWidth <= 20 &&\n        newScrollbarWidth < scrollbarWidth) {\n        return { containerWidth, scrollbarWidth: newScrollbarWidth };\n    }\n    return containerWidth !== newContainerWidth || scrollbarWidth !== newScrollbarWidth\n        ? { containerWidth: newContainerWidth, scrollbarWidth: newScrollbarWidth }\n        : state;\n};\nconst resolveContainerWidth = (el, breakpoints) => {\n    let width = el === null || el === void 0 ? void 0 : el.clientWidth;\n    if (width !== undefined && breakpoints && breakpoints.length > 0) {\n        const sorted = [...breakpoints.filter((x) => x > 0)].sort((a, b) => b - a);\n        sorted.push(Math.floor(sorted[sorted.length - 1] / 2));\n        const threshold = width;\n        width = sorted.find((breakpoint, index) => breakpoint <= threshold || index === sorted.length - 1);\n    }\n    return width;\n};\nconst useContainerWidth = (breakpoints, defaultContainerWidth) => {\n    const [{ containerWidth }, dispatch] = React.useReducer(containerWidthReducer, {\n        containerWidth: defaultContainerWidth,\n    });\n    const ref = React.useRef(null);\n    const observerRef = React.useRef();\n    const containerRef = React.useCallback((node) => {\n        var _a;\n        (_a = observerRef.current) === null || _a === void 0 ? void 0 : _a.disconnect();\n        observerRef.current = undefined;\n        ref.current = node;\n        const updateWidth = () => dispatch({\n            newContainerWidth: resolveContainerWidth(ref.current, breakpoints),\n            newScrollbarWidth: window.innerWidth - document.documentElement.clientWidth,\n        });\n        updateWidth();\n        if (node && typeof ResizeObserver !== \"undefined\") {\n            observerRef.current = new ResizeObserver(updateWidth);\n            observerRef.current.observe(node);\n        }\n    }, [breakpoints]);\n    return { containerRef, containerWidth };\n};\n\nconst breakpoints = Object.freeze([1200, 600, 300, 0]);\nconst unwrap = (value, containerWidth) => typeof value === \"function\" ? value(containerWidth) : value;\nconst unwrapParameter = (value, containerWidth) => typeof value !== \"undefined\" ? unwrap(value, containerWidth) : undefined;\nconst selectResponsiveValue = (values, containerWidth) => {\n    const index = breakpoints.findIndex((breakpoint) => breakpoint <= containerWidth);\n    return unwrap(values[index >= 0 ? index : 0], containerWidth);\n};\nconst resolveResponsiveParameter = (parameter, containerWidth, values, minValue = 0) => {\n    const value = unwrapParameter(parameter, containerWidth);\n    return Math.round(Math.max(value === undefined ? selectResponsiveValue(values, containerWidth) : value, minValue));\n};\n\nconst resolveLayoutOptions = ({ layout, onClick, containerWidth, targetRowHeight, rowConstraints, columns, spacing, padding, sizes, }) => ({\n    layout,\n    onClick,\n    containerWidth,\n    columns: resolveResponsiveParameter(columns, containerWidth, [5, 4, 3, 2], 1),\n    spacing: resolveResponsiveParameter(spacing, containerWidth, [20, 15, 10, 5]),\n    padding: resolveResponsiveParameter(padding, containerWidth, [0, 0, 0, 0, 0]),\n    targetRowHeight: resolveResponsiveParameter(targetRowHeight, containerWidth, [\n        (w) => w / 5,\n        (w) => w / 4,\n        (w) => w / 3,\n        (w) => w / 2,\n    ]),\n    rowConstraints: unwrapParameter(rowConstraints, containerWidth),\n    sizes,\n});\nconst resolveComponentsProps = (componentsProps, containerWidth) => typeof componentsProps === \"function\" ? componentsProps(containerWidth) : componentsProps;\nconst renderLayout = (props, containerWidth, componentsProps) => {\n    const { photos, layout, renderPhoto, renderRowContainer, renderColumnContainer } = props;\n    const layoutOptions = resolveLayoutOptions({ containerWidth, ...props });\n    const commonLayoutProps = { photos, renderPhoto, componentsProps };\n    if (layout === \"rows\") {\n        return (React.createElement(RowsLayout, { layoutOptions: layoutOptions, renderRowContainer: renderRowContainer, ...commonLayoutProps }));\n    }\n    if (layout === \"columns\") {\n        return (React.createElement(ColumnsLayout, { layoutOptions: layoutOptions, renderColumnContainer: renderColumnContainer, ...commonLayoutProps }));\n    }\n    return (React.createElement(MasonryLayout, { layoutOptions: layoutOptions, renderColumnContainer: renderColumnContainer, ...commonLayoutProps }));\n};\nconst PhotoAlbum = (props) => {\n    const { photos, layout, renderContainer, defaultContainerWidth, breakpoints } = props;\n    const { containerRef, containerWidth } = useContainerWidth(useArray(breakpoints), defaultContainerWidth);\n    if (!layout || ![\"rows\", \"columns\", \"masonry\"].includes(layout) || !Array.isArray(photos))\n        return null;\n    const componentsProps = resolveComponentsProps(props.componentsProps, containerWidth);\n    return (React.createElement(ContainerRenderer, { layout: layout, containerRef: containerRef, renderContainer: renderContainer, containerProps: componentsProps === null || componentsProps === void 0 ? void 0 : componentsProps.containerProps }, containerWidth ? renderLayout(props, containerWidth, componentsProps) : null));\n};\n\nexport { PhotoAlbum, PhotoAlbum as default };\n"],"names":["ratio","_ref","width","height","round","value","decimals","arguments","length","undefined","factor","Math","pow","Number","EPSILON","MinHeap","comparator","heap","compare","n","greater","i","j","swap","temp","push","element","k","k2","floor","swim","pop","max","sink","size","findShortestPath","graph","startNode","endNode","precedentsMap","Map","visited","Set","storedShortestPaths","set","rank","pQueue","el","weight","a","b","id","_loop","_pQueue$pop","has","neighboringNodes","add","forEach","neighborWeight","neighbor","newWeight","currentId","get","currentWeight","buildPrecedentsMap","nodes","node","reverse","getPathFromPrecedentsMap","getCommonHeight","row","containerWidth","spacing","padding","reduce","acc","photo","cost","photos","targetRowHeight","slice","commonHeight","computeRowsLayout","_ref4","layoutOptions","rowConstraints","limitNodeSearch","_ref2","minRatio","min","MAX_VALUE","findIdealNodeSearch","getNeighbors","_ref3","_a","_b","results","startOffset","minPhotos","endOffset","maxPhotos","Infinity","currentCost","makeGetRowNeighbors","path","layout","_loop2","map","index","_ref5","_ref6","photoIndex","photosCount","calcWidth","base","_ref7","_ref8","gaps","concat","cssPhotoWidth","calculateSizesValue","match","PhotoRenderer","props","_ref12","_props$imageProps","imageProps","_props$imageProps2","style","restImageProps","_objectWithoutProperties","_excluded","renderPhoto","onClick","imageStyle","_objectSpread","display","boxSizing","aspectRatio","marginBottom","cursor","handleClick","event","src","alt","title","className","loading","decoding","srcSet","sizes","images","find","_ref9","sort","first","second","image","join","_ref10","viewport","ceil","srcSetAndSizes","renderDefaultPhoto","wrapped","unwrappedStyle","rest","_excluded2","React","wrapperStyle","defaultRenderRowContainer","_ref13","rowContainerProps","children","RowContainerRenderer","rowIndex","rowsCount","renderRowContainer","_props$rowContainerPr","_props$rowContainerPr2","restRowContainerProps","_excluded3","flexDirection","flexWrap","alignItems","justifyContent","RowsLayout","componentsProps","rowsLayout","key","_ref14","findShortestPathLengthN","pathLength","matrix","reconstructShortestPath","queue","_loop3","currentQueue","_toConsumableArray","keys","clear","accumulatedWeight","_ref15","paths","nextPath","computeShortestPath","buildColumnsModel","_ref17","columnsGaps","columnsRatios","columnsModel","totalRatio","total","columnRatio","_loop4","column","totalAdjustedGaps","columnWidth","_ref18","computeColumnsModel","_ref19","targetColumnWidth","columns","averageRatio","Array","from","_","targetColumnHeight","_ref16","cutOffHeight","makeGetColumnNeighbors","computeLayout","_computeColumnsModel","findIndex","columnModel","_ref20","_ref20$layout","computeColumnsLayout","_ref21","defaultRenderColumnContainer","_ref22","columnContainerProps","cssColumnWidth","columnIndex","columnsCount","ColumnContainerRenderer","renderColumnContainer","_props$columnContaine","_props$columnContaine2","restColumnContainerProps","_excluded4","_excluded5","ColumnsLayout","columnsLayout","_ref23","computeMasonryLayout","columnsCurrentTopPositions","model","shortestColumn","currentShortestColumn","item","_ref24","MasonryLayout","masonryLayout","_ref25","defaultRenderContainer","_ref26","containerProps","containerRef","ref","ContainerRenderer","renderContainer","_props$containerProps","_props$containerProps2","restContainerProps","_excluded6","containerWidthReducer","state","_ref27","newContainerWidth","newScrollbarWidth","scrollbarWidth","resolveContainerWidth","breakpoints","clientWidth","sorted","filter","x","threshold","breakpoint","Object","freeze","unwrap","unwrapParameter","selectResponsiveValue","values","resolveResponsiveParameter","parameter","minValue","renderLayout","_ref28","w","resolveLayoutOptions","commonLayoutProps","PhotoAlbum","defaultContainerWidth","_useContainerWidth","_React$useReducer","_React$useReducer2","_slicedToArray","dispatch","observerRef","current","disconnect","updateWidth","window","innerWidth","document","documentElement","ResizeObserver","observe","useContainerWidth","array","useArray","includes","isArray","resolveComponentsProps"],"sourceRoot":""}